{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Background Operation ID is a ministry that exists to serve the need of many individuals to obtain identification documents to support their application for a variety of services from housing to job application. The ministry is volunteer driven and has been in place for over thirty years. During this time thousands of individuals have received help to support their identification needs. Help is provided in the form of vouchers that can be used to pay for services rendererd by either the Texas Department of Public Safety for a Texase ID or by the Bureau of Vital Statistics of Texas or another state to acquire a certified copy of a birth certificate. Over the years of Operation ID's existence various paper driven pipelines of client processing in providing identification services have been used. The currently existing pipeline consists of four stages which are executed sequentially. Screening Check In Interviewing Back Office Voucher Writing In the Screening stage, a client is greeted at the front desk by a volunteer who checks that the client's referral letter is valid and that the documents the client possesses support the services they are seeking. The referral letter is provided by the agency representing the client to Operation ID and this agency performs the first level of screening. If this first level of screening is done carefully, the Screening stage at Operation ID can proceed very quickly, allowing the client to proceed to the Check In stage. In the Check In stage (also performed by a volunteer at the front desk) the client is entered into the Operation ID database maintained by the Apricot database driven application software provided by the vendor Social Solutions . Apricot is used to capture a client's demographic data together with a history of a client's previous visits to Operation ID. The demographic data includes a client's name, date of birth and age (a calculated field based on date of birth). The demographic data also includes a link to a household table, if a client is part of a household being processed together. Apricot stores basic demographic data in a table it refers to as the Client Tracking table and stores client visits in a related table called the Client Tracking Document Folder. (In terms of database technology, the Client Tracking Document Folder is related to the Client Tracking table by a foreign key.) Operation ID makes use of the Client Tracking Document Folder to record services provided to a client during previous visits. Whenever a service is provided to a client (example: writing a check for a birth certificate), the service is recorded by date together with the number of any issued check. At a date after the date of service, the disposition of an issued check is recorded. Most often this disposition will be either Cleared, indicating that the check has been used by the client or Voided, indicating that the check is no longer valid. During the Check In stage at the front desk, a client's history of previous visits (if any) is manually copied onto a small slip of paper which is then stapled to the client's referral letter. Previous visits may make a client ineligible for a service being requested. Operation ID enforces a twice-in-a-lifetime policy for birth certificate or ID services. If a client's history of previous visits reveals that they have twice previously been issued checks for a birth certificate and both checks have been used, then the client is not eligible for another check for a birth certificate. Similarly, if a client has twice previously been issued checks for an ID (either a Texas ID or a Texas Driver's License) and both checks have been used, then they are not eligible for another check for an ID. If a client is ineligible for a requested service, then they are so informed at the front desk. A client ineligible for a requested service may appeal their ineligibilty and may, at the discretion of Operation ID management, be granted an exception. Most clients are either first time clients (no previous visit history) or clients who have not yet exhausted eligibility for a requested service. In either case, such a client is ready for the Interviewing stage. A client ready to be interviewed may have to wait for a (volunteer) interviewer to become available. Clients are processed on a first-come-first-served basis and frequently have to wait for an available interviewer. When an interviewer picks up a waiting client, the client's requested services are reviewed and paperwork in support of these services is completed. If the client is representing themselve alone, the paperwork generation may go fairly quickly. If the client is requesting an out-of-state birth certificate, more time is required, because the paperwork required to acquire a certified birth certificate vaires from state to state. If the client represents a household, then paperwork for each member of the household is required and this may slow down the interviewing process considerably. In any event, under the current client processing pipeline, all paperwork required is completed during the interviewing process before the back office can generate any voucher for a client. When paperwork filled out during the Interviewing stage is sent to the back office, the Back Office Voucher Writing stage may begin. This stage may not begin immediately upon the delivery of the completed paperwork for a given client, because a backlog of previous clients may need to be processed first.When a client's paperwork is eventually processed by the back office, what remains to be done is straightforward. A voucher for each service requested by a client is first generated by use of Quickbooks (operated by a volunteer). Then the voucher number of each generated voucher is recorded in the Apricot database (by another volunteer) in the client's visit history. This record keeping step is what enables enforcement of the twice-in-a-lifetime service policy mentioned above. After vouchers have been generated and recorded, they are deliverd to the client and the pipeline of client processing is completed. OPIDDaily The OPIDDaily application was designed to partially automate the pipeline of client processing at Operation ID by allowing the back office production of vouchers to proceed in parallel with the interviewing of clients to generate paperwork supporting their needs. OPIDDaily takes advantage of the fact that a client's voucher needs are already known during the Screening and Check In stages. This allows the front desk volunteers to send the back office volunteers information which allows the Back Office Voucher Writing stage to begin, possibly even before the Interviewing Stage has started. Using OPIDDaily, a Service Ticket describing a client's previous visits (if any) together with the services the client is seeking is printed on a printer in the back office. The back office volunteers can begin processing the Service Ticket document in advance of the Interviewing stage being completed. In effect, the Interviewing stage and the Back Office Voucher Writing stage can be run in parallel. This has the potential of delivering substantial time savings over the currently existing sequential pipeline. The Screening and Check In stages will require a small amount of additional time in order to generate the Service Ticket document for a client, but this extra time will be more than compensated for by the ability to run the Interviewing and Back Office Voucher Writing stages in parallel. OPIDDaily will be available as a password protected website to registered users. This document describes the design and implementation of OPIDDaily. The Infrastructure tab describes how project OPIDDaily is maintained on a desktop host and how it is deployed to the .NET hosting service AppHarbor. The Database tab describes how the OPIDDaily database is managed on the desktop and at AppHarbor. The Implementation tab provides some details concerning the implementation of OPIDDaily. Users OPIDDaily is a role-based system. Each registered user will be assignd a user role by the OPIDDaily administrator. The role that a user is assigned will determine the OPIDDaily features available to the user. A user's assigned role will depend upon whether the user volunteers at the front desk, is a volunteer interviewer or is a back office volunteer. In addition, there will be a manager's role to be assigned to Operation ID managers who want to watch the client processing flow during a day of operation. The OPIDDaily administrator will be in the role of Superadmin and will have access to features necessary for the maintenance of application OPIDDaily. There will be only one Superadmin account, but the credentials for this account will be available to maintainers of the application.","title":"Background"},{"location":"#background","text":"Operation ID is a ministry that exists to serve the need of many individuals to obtain identification documents to support their application for a variety of services from housing to job application. The ministry is volunteer driven and has been in place for over thirty years. During this time thousands of individuals have received help to support their identification needs. Help is provided in the form of vouchers that can be used to pay for services rendererd by either the Texas Department of Public Safety for a Texase ID or by the Bureau of Vital Statistics of Texas or another state to acquire a certified copy of a birth certificate. Over the years of Operation ID's existence various paper driven pipelines of client processing in providing identification services have been used. The currently existing pipeline consists of four stages which are executed sequentially. Screening Check In Interviewing Back Office Voucher Writing In the Screening stage, a client is greeted at the front desk by a volunteer who checks that the client's referral letter is valid and that the documents the client possesses support the services they are seeking. The referral letter is provided by the agency representing the client to Operation ID and this agency performs the first level of screening. If this first level of screening is done carefully, the Screening stage at Operation ID can proceed very quickly, allowing the client to proceed to the Check In stage. In the Check In stage (also performed by a volunteer at the front desk) the client is entered into the Operation ID database maintained by the Apricot database driven application software provided by the vendor Social Solutions . Apricot is used to capture a client's demographic data together with a history of a client's previous visits to Operation ID. The demographic data includes a client's name, date of birth and age (a calculated field based on date of birth). The demographic data also includes a link to a household table, if a client is part of a household being processed together. Apricot stores basic demographic data in a table it refers to as the Client Tracking table and stores client visits in a related table called the Client Tracking Document Folder. (In terms of database technology, the Client Tracking Document Folder is related to the Client Tracking table by a foreign key.) Operation ID makes use of the Client Tracking Document Folder to record services provided to a client during previous visits. Whenever a service is provided to a client (example: writing a check for a birth certificate), the service is recorded by date together with the number of any issued check. At a date after the date of service, the disposition of an issued check is recorded. Most often this disposition will be either Cleared, indicating that the check has been used by the client or Voided, indicating that the check is no longer valid. During the Check In stage at the front desk, a client's history of previous visits (if any) is manually copied onto a small slip of paper which is then stapled to the client's referral letter. Previous visits may make a client ineligible for a service being requested. Operation ID enforces a twice-in-a-lifetime policy for birth certificate or ID services. If a client's history of previous visits reveals that they have twice previously been issued checks for a birth certificate and both checks have been used, then the client is not eligible for another check for a birth certificate. Similarly, if a client has twice previously been issued checks for an ID (either a Texas ID or a Texas Driver's License) and both checks have been used, then they are not eligible for another check for an ID. If a client is ineligible for a requested service, then they are so informed at the front desk. A client ineligible for a requested service may appeal their ineligibilty and may, at the discretion of Operation ID management, be granted an exception. Most clients are either first time clients (no previous visit history) or clients who have not yet exhausted eligibility for a requested service. In either case, such a client is ready for the Interviewing stage. A client ready to be interviewed may have to wait for a (volunteer) interviewer to become available. Clients are processed on a first-come-first-served basis and frequently have to wait for an available interviewer. When an interviewer picks up a waiting client, the client's requested services are reviewed and paperwork in support of these services is completed. If the client is representing themselve alone, the paperwork generation may go fairly quickly. If the client is requesting an out-of-state birth certificate, more time is required, because the paperwork required to acquire a certified birth certificate vaires from state to state. If the client represents a household, then paperwork for each member of the household is required and this may slow down the interviewing process considerably. In any event, under the current client processing pipeline, all paperwork required is completed during the interviewing process before the back office can generate any voucher for a client. When paperwork filled out during the Interviewing stage is sent to the back office, the Back Office Voucher Writing stage may begin. This stage may not begin immediately upon the delivery of the completed paperwork for a given client, because a backlog of previous clients may need to be processed first.When a client's paperwork is eventually processed by the back office, what remains to be done is straightforward. A voucher for each service requested by a client is first generated by use of Quickbooks (operated by a volunteer). Then the voucher number of each generated voucher is recorded in the Apricot database (by another volunteer) in the client's visit history. This record keeping step is what enables enforcement of the twice-in-a-lifetime service policy mentioned above. After vouchers have been generated and recorded, they are deliverd to the client and the pipeline of client processing is completed.","title":"Background"},{"location":"#opiddaily","text":"The OPIDDaily application was designed to partially automate the pipeline of client processing at Operation ID by allowing the back office production of vouchers to proceed in parallel with the interviewing of clients to generate paperwork supporting their needs. OPIDDaily takes advantage of the fact that a client's voucher needs are already known during the Screening and Check In stages. This allows the front desk volunteers to send the back office volunteers information which allows the Back Office Voucher Writing stage to begin, possibly even before the Interviewing Stage has started. Using OPIDDaily, a Service Ticket describing a client's previous visits (if any) together with the services the client is seeking is printed on a printer in the back office. The back office volunteers can begin processing the Service Ticket document in advance of the Interviewing stage being completed. In effect, the Interviewing stage and the Back Office Voucher Writing stage can be run in parallel. This has the potential of delivering substantial time savings over the currently existing sequential pipeline. The Screening and Check In stages will require a small amount of additional time in order to generate the Service Ticket document for a client, but this extra time will be more than compensated for by the ability to run the Interviewing and Back Office Voucher Writing stages in parallel. OPIDDaily will be available as a password protected website to registered users. This document describes the design and implementation of OPIDDaily. The Infrastructure tab describes how project OPIDDaily is maintained on a desktop host and how it is deployed to the .NET hosting service AppHarbor. The Database tab describes how the OPIDDaily database is managed on the desktop and at AppHarbor. The Implementation tab provides some details concerning the implementation of OPIDDaily.","title":"OPIDDaily"},{"location":"#users","text":"OPIDDaily is a role-based system. Each registered user will be assignd a user role by the OPIDDaily administrator. The role that a user is assigned will determine the OPIDDaily features available to the user. A user's assigned role will depend upon whether the user volunteers at the front desk, is a volunteer interviewer or is a back office volunteer. In addition, there will be a manager's role to be assigned to Operation ID managers who want to watch the client processing flow during a day of operation. The OPIDDaily administrator will be in the role of Superadmin and will have access to features necessary for the maintenance of application OPIDDaily. There will be only one Superadmin account, but the credentials for this account will be available to maintainers of the application.","title":"Users"},{"location":"Database/","text":"Database OPIDDaily is a database driven application built using SQL Server technology. In the desktop environment OPIDDaily is built using the Sql Server Express database engine. In the online environment at AppHarbor a full SQL Server is used. The two versions are compatible with each other with respect to the database features used. SQL Server Management Studio v18.0 (SSMS) is used to manage both database engines. In the desktop environment, Windows Authentication is used to connect to the Sql Server Express database. In the online enviroment, SQL Server Authentication is used to connect to the SQL Server database. When application OPIDDaily was created at AppHarbor, a free version of SQL Server was added on through the AppHarbor interface. The connection string to this SQL Server is found by selecting the SQL Server add-on and following the \"Go to SQL Server\" link on the page that appears. The value of this connection string is stored as the value of Config.WorkingProductionConnection string on file Config.cs. The 3 components of the connection string, HostName, UserName and Password, are also displayed on this page. The components may be used to configure a SQL Server Authentication connection to the AppHarbor database through SSMS. The same connection string displayed at AppHarbor is retrieved at runtime by accessing Config.ConnectionString, which returns the value of SQLSERVER_CONNNECTION_STRING configured in the <appSettings> section of file Web.config. The statically configured value on file Web.Config points to the OpidDailyDB on the desktop SQL Server Express. At runtime, AppHarbor will overwrite this statically configured value with the value displayed at AppHarbor. See the section on the Connection String. Connection String In the desktop environment, SSMS was used to create an empty project database by executing the SQL query create database OpidDailyDB The Visual Studio Server Explorer (found under the OPIDDaily project View menu) was then used to discover the connection string to database OpidDailyDB by creating a new Data Connection to it and copying the Connection String property of the data connection as the value of the variable SQLSERVER_CONNECTION_STRING in the <appSettings> section of Web.config. The value is accessed on files IDentityDB.cs and OpidDailyDB.cs by reading the value of the static variable Config.ConnectionString. The online version of OPIDDaily is hosted as an application at AppHarbor and it uses a database server provided as an add-on. The add-on database server includes a database which serves as the application database, so it is not necessary to create the application database as was done above for the desktop version. ELMAH uses the configuration string used by the OPIDDaily application. This is accomplished by configuring the connection string OpidDailyConnectionString in the <connectionStrings> section on Web.config and setting the connection string alias for the SQL Server add-on at AppHarbor to be OpidDailyConnectionString . To set this alias, select the SQL Server add-on for application OPIDDaily at AppHarbor and then follow the link \"Go to SQL Server\" on the page that appears. Click the button labeled \"Edit database configuration\" to set OpidDailyConnectionString as the alias value for the connection string. When this is done, OpidDailyConnectionString will appear as the value of SQLSERVER_CONNECTION_STRING_ALIAS in the Configuration variables section of application OPIDDaily at AppHarbor. When application OPIDDaily is deployed to AppHarbor, this alias will overwrite the configured value on file Web.config by the value of the connection string for the AppHarbor database. This is explained in the same knowledge base article referenced above. Database Diagram The diagram was created by SSMS, copied to the clipboard (using the \"Copy Diagram to Clipboard\" command found on the freespace context menu) and then pasted into the Paint tool. Inside of Paint it is saved as a .PNG file. Version 18.0 of SSMS does not allow database diagrams to be created. Newer releases have restored this capability. But the diagram seen here was created by an earlier release of SSMS, which did have the ability to create database diagrams. The 3 tables in the lower right of the above diagram are created by ASP.NET Identity 2.0 to manage registered users of OPIDDaily. The 3 tables are managed by their own data context which cannot be augmented by additional tables. However, data fields can be added to table AspNetUsers if necessary. All other tables in the diagram are managed by a separate data context. The 2 data contexts of project OPIDDaily are referred to as IdentityDb and OpidDailyDB. (See the section Entity Framework Code First of the Infrastructure tab.) The technique for establishing a single connection string over 2 data contexts is described in Scott Allen's Pluralsight video . The tables belongng to data context OpidDailyDB were created at AppHarbor using a script file. This was done by running the command PM> update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration -Script -SourceMigration $InitialDatabase to generate a SQL script to be run in SSMS against the database at AppHarbor. The command created a script file necessary to create the tables for this data context using all the migrations applied since the initial migration. Notice that there is no colon (:) following -SourceMigration in this command. To generate a script to run the Down methods of multiple down-migrations, do, for example, PM> Update-Database -ConfigurationTypeName Eref.DataContexts.OpidDailyMigrations.Configuration -Script -TargetMigration: ExpressClient Notice that there is a colon (:) following -TargetMigration in this command. This command will create a script to run the Down methods of all migrations since (and not including) migration ExpressClient. It is important to be able to generate this script if changes need to be backed out, because the deployed versions of application OPIDDaily do not use Entity Framework to manage the database. Managing Users OPIDDaily is a role based database application administered by a Superadmin user. The Superadmin user has the responsibilty of establishing a login account for each OPIDDaily user, which includes the use's role. This is done prevent a user from specifying his/her own role when logging in and to force the user into his/her assigned role instead. See the introduction and Role Controllers sections of the Impementation tab for a discussion of roles. The Superadmin will be given a user name and email address for a new user. For example, if Mary Atwood would like to use the user name Mary and email address maryatwood@gmail.com, this request would be given to the Superadmin user. Provided that the user name Mary is not already in use, the Superadmin user would use a private interface to enter Mary Atwood in the Invitations table under UserName Mary (with FullName Mary Atwood) and Email Address maryatwood@gmail.com. The Supeadmin would also use the OPIDDaily interface to assign a role to user Mary Atwood in the Invitations table. The record in the Invitations table is in effect an invitation for Mary Atwood to register under user name Mary and email address maryatwood@gmail.com in the assigned role. The Superadmin will notify Mary that her account has been created and that she may register with application OPIDDaily using the credentials she has supplied together with a password of her own choosing. When Mary registers, the user name and email address she provides will be checked against the Invitations table. If this pair of credentials is not found in the Invitations table, Mary's attempt to register will be rejected. If they are found, a record will be created for her in the AspNetUsers table using the password she has specified and using the role assigned by the Superadmin, which has been stored in the Invitations table. On subsequent visits to OPIDDaily, Mary may simply login with the credentials established by her registration. When logged in she will be recognized in her assigned role. User email addresses do not need to be unique per account. This is not the default behavior; it is enabled by the setting RequireUniqueEmail = false in method ApplicationUserManager.Create on file App_Start/IdentityConfig.cs There are two special accounts reserved for usage by the two users who serve at the front desk on any given day of operation. Each of these accounts has the pre-assigned role called FrontDesk. The users are the Screener and the TicketMaster which correspond to the pipeline stages Screening and Checkin , respectively. (See the Background tab for information about the pipeline stages.) Having dedicated accounts avoids the need to create unique accounts in the role of FrontDesk. There are also two additional special users called Client1 and Client2 corresponding to the pipeline stages Screening and CheckIn , respectively. (See the Background tab for information about the pipeline stages.) During the screening stage, the Screener user will enter the name and date of birth of an entering client into the OPIDDaily database. To ensure that this information has been correctly entered, the Screener may click a button to have this information appear on a small tablet computer which will be handed to the client for verification. This small tablet computer will be logged into the OPIDDaily application as Client1 . During the Checkin stage, by consultng the Apricot database, the TicketMaster user will record any previous visit history by a screened client in the OPIDDaily database. If previous visits indicate that the screened client is ineligible for a service being sought, the TicketMaser may click a button to have the visit history appear on a second small tablet computer which will be handed to the client. This second small tablet computer will be logged into the OPIDDaily application as Client2 . Both users Client1 and Client2 are assigned the role FrontDesk. Database Utilization SSMS can be used to check on the utilization of a datbase. To do so: Right click a database name Navigate to Reports > Standard Reports > Disk Usage This is important because of the 20MB limit of a free AppHarbor database. Use it to make sure the disk limits are not exceeded. Application OPIDDaily allows the Superadmin user to delete client datbase records corresponding to previous days of operation. This must be done periodically to avoid exceeding the 20MB limit.","title":"Database"},{"location":"Database/#database","text":"OPIDDaily is a database driven application built using SQL Server technology. In the desktop environment OPIDDaily is built using the Sql Server Express database engine. In the online environment at AppHarbor a full SQL Server is used. The two versions are compatible with each other with respect to the database features used. SQL Server Management Studio v18.0 (SSMS) is used to manage both database engines. In the desktop environment, Windows Authentication is used to connect to the Sql Server Express database. In the online enviroment, SQL Server Authentication is used to connect to the SQL Server database. When application OPIDDaily was created at AppHarbor, a free version of SQL Server was added on through the AppHarbor interface. The connection string to this SQL Server is found by selecting the SQL Server add-on and following the \"Go to SQL Server\" link on the page that appears. The value of this connection string is stored as the value of Config.WorkingProductionConnection string on file Config.cs. The 3 components of the connection string, HostName, UserName and Password, are also displayed on this page. The components may be used to configure a SQL Server Authentication connection to the AppHarbor database through SSMS. The same connection string displayed at AppHarbor is retrieved at runtime by accessing Config.ConnectionString, which returns the value of SQLSERVER_CONNNECTION_STRING configured in the <appSettings> section of file Web.config. The statically configured value on file Web.Config points to the OpidDailyDB on the desktop SQL Server Express. At runtime, AppHarbor will overwrite this statically configured value with the value displayed at AppHarbor. See the section on the Connection String.","title":"Database"},{"location":"Database/#connection-string","text":"In the desktop environment, SSMS was used to create an empty project database by executing the SQL query create database OpidDailyDB The Visual Studio Server Explorer (found under the OPIDDaily project View menu) was then used to discover the connection string to database OpidDailyDB by creating a new Data Connection to it and copying the Connection String property of the data connection as the value of the variable SQLSERVER_CONNECTION_STRING in the <appSettings> section of Web.config. The value is accessed on files IDentityDB.cs and OpidDailyDB.cs by reading the value of the static variable Config.ConnectionString. The online version of OPIDDaily is hosted as an application at AppHarbor and it uses a database server provided as an add-on. The add-on database server includes a database which serves as the application database, so it is not necessary to create the application database as was done above for the desktop version. ELMAH uses the configuration string used by the OPIDDaily application. This is accomplished by configuring the connection string OpidDailyConnectionString in the <connectionStrings> section on Web.config and setting the connection string alias for the SQL Server add-on at AppHarbor to be OpidDailyConnectionString . To set this alias, select the SQL Server add-on for application OPIDDaily at AppHarbor and then follow the link \"Go to SQL Server\" on the page that appears. Click the button labeled \"Edit database configuration\" to set OpidDailyConnectionString as the alias value for the connection string. When this is done, OpidDailyConnectionString will appear as the value of SQLSERVER_CONNECTION_STRING_ALIAS in the Configuration variables section of application OPIDDaily at AppHarbor. When application OPIDDaily is deployed to AppHarbor, this alias will overwrite the configured value on file Web.config by the value of the connection string for the AppHarbor database. This is explained in the same knowledge base article referenced above.","title":"Connection String"},{"location":"Database/#database-diagram","text":"The diagram was created by SSMS, copied to the clipboard (using the \"Copy Diagram to Clipboard\" command found on the freespace context menu) and then pasted into the Paint tool. Inside of Paint it is saved as a .PNG file. Version 18.0 of SSMS does not allow database diagrams to be created. Newer releases have restored this capability. But the diagram seen here was created by an earlier release of SSMS, which did have the ability to create database diagrams. The 3 tables in the lower right of the above diagram are created by ASP.NET Identity 2.0 to manage registered users of OPIDDaily. The 3 tables are managed by their own data context which cannot be augmented by additional tables. However, data fields can be added to table AspNetUsers if necessary. All other tables in the diagram are managed by a separate data context. The 2 data contexts of project OPIDDaily are referred to as IdentityDb and OpidDailyDB. (See the section Entity Framework Code First of the Infrastructure tab.) The technique for establishing a single connection string over 2 data contexts is described in Scott Allen's Pluralsight video . The tables belongng to data context OpidDailyDB were created at AppHarbor using a script file. This was done by running the command PM> update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration -Script -SourceMigration $InitialDatabase to generate a SQL script to be run in SSMS against the database at AppHarbor. The command created a script file necessary to create the tables for this data context using all the migrations applied since the initial migration. Notice that there is no colon (:) following -SourceMigration in this command. To generate a script to run the Down methods of multiple down-migrations, do, for example, PM> Update-Database -ConfigurationTypeName Eref.DataContexts.OpidDailyMigrations.Configuration -Script -TargetMigration: ExpressClient Notice that there is a colon (:) following -TargetMigration in this command. This command will create a script to run the Down methods of all migrations since (and not including) migration ExpressClient. It is important to be able to generate this script if changes need to be backed out, because the deployed versions of application OPIDDaily do not use Entity Framework to manage the database.","title":"Database Diagram"},{"location":"Database/#managing-users","text":"OPIDDaily is a role based database application administered by a Superadmin user. The Superadmin user has the responsibilty of establishing a login account for each OPIDDaily user, which includes the use's role. This is done prevent a user from specifying his/her own role when logging in and to force the user into his/her assigned role instead. See the introduction and Role Controllers sections of the Impementation tab for a discussion of roles. The Superadmin will be given a user name and email address for a new user. For example, if Mary Atwood would like to use the user name Mary and email address maryatwood@gmail.com, this request would be given to the Superadmin user. Provided that the user name Mary is not already in use, the Superadmin user would use a private interface to enter Mary Atwood in the Invitations table under UserName Mary (with FullName Mary Atwood) and Email Address maryatwood@gmail.com. The Supeadmin would also use the OPIDDaily interface to assign a role to user Mary Atwood in the Invitations table. The record in the Invitations table is in effect an invitation for Mary Atwood to register under user name Mary and email address maryatwood@gmail.com in the assigned role. The Superadmin will notify Mary that her account has been created and that she may register with application OPIDDaily using the credentials she has supplied together with a password of her own choosing. When Mary registers, the user name and email address she provides will be checked against the Invitations table. If this pair of credentials is not found in the Invitations table, Mary's attempt to register will be rejected. If they are found, a record will be created for her in the AspNetUsers table using the password she has specified and using the role assigned by the Superadmin, which has been stored in the Invitations table. On subsequent visits to OPIDDaily, Mary may simply login with the credentials established by her registration. When logged in she will be recognized in her assigned role. User email addresses do not need to be unique per account. This is not the default behavior; it is enabled by the setting RequireUniqueEmail = false in method ApplicationUserManager.Create on file App_Start/IdentityConfig.cs There are two special accounts reserved for usage by the two users who serve at the front desk on any given day of operation. Each of these accounts has the pre-assigned role called FrontDesk. The users are the Screener and the TicketMaster which correspond to the pipeline stages Screening and Checkin , respectively. (See the Background tab for information about the pipeline stages.) Having dedicated accounts avoids the need to create unique accounts in the role of FrontDesk. There are also two additional special users called Client1 and Client2 corresponding to the pipeline stages Screening and CheckIn , respectively. (See the Background tab for information about the pipeline stages.) During the screening stage, the Screener user will enter the name and date of birth of an entering client into the OPIDDaily database. To ensure that this information has been correctly entered, the Screener may click a button to have this information appear on a small tablet computer which will be handed to the client for verification. This small tablet computer will be logged into the OPIDDaily application as Client1 . During the Checkin stage, by consultng the Apricot database, the TicketMaster user will record any previous visit history by a screened client in the OPIDDaily database. If previous visits indicate that the screened client is ineligible for a service being sought, the TicketMaser may click a button to have the visit history appear on a second small tablet computer which will be handed to the client. This second small tablet computer will be logged into the OPIDDaily application as Client2 . Both users Client1 and Client2 are assigned the role FrontDesk.","title":"Managing Users"},{"location":"Database/#database-utilization","text":"SSMS can be used to check on the utilization of a datbase. To do so: Right click a database name Navigate to Reports > Standard Reports > Disk Usage This is important because of the 20MB limit of a free AppHarbor database. Use it to make sure the disk limits are not exceeded. Application OPIDDaily allows the Superadmin user to delete client datbase records corresponding to previous days of operation. This must be done periodically to avoid exceeding the 20MB limit.","title":"Database Utilization"},{"location":"Implementation/","text":"Implementation Application OPIDDaily is implemented as an ASP.NET Framework application using the ASP.NET MVC 5 project template provided by Visual Studio 2019 (Community Edition). It uses ASP.NET Identity 2.0 to define a set of user roles. Each user role is associated with a separate MVC controller. Controller inheritance is used to share editing functionality across user roles. It may be useful to upgrade application OPIDDaily to use the more modern ASP.NET Core technology. It may also be useful to proivde an alternative to the free hosting service AppHarbor, which is currentl used by OPIDDaily. See the AppHarbor section of the Infratructure tab for details on this. The graphical user interface of OPIDDaily is built using Bootstrap 3.0.0. Each user role is associated with its own layout file which defines a Bootstrap navbar containing links to the OPIDDaily features available to users in the role. The ASP.NET Identity system ensures that a user in a specified role cannot visit any pages outside of those allowed to users in that role. (See the section on Role Controllers.) Because of its use of SignalR, application OPIDDaily will always require a server side component. See the section on SignalR on this tab for a discussion of this. The Superadmin User OPIDDaily defines a pre-registered superadmin user who has privileges to create new roles invite new users to register in a pre-determined role add new agencies The credentials for the Superadmin user are configured on file Startup.cs. There is only a single user with role of Superadmin. MVC Routing Application OPIDDaily uses only the default routing rule supplied by the Visual Studio MVC 5 template. This default routing rule is found in .../App_Start/RoutConfig.cs . routes.MapRoute( name: \"Default\", url: \"{controller}/{action}/{id}\", defaults: new { controller = \"Users\", action = \"Index\", id = UrlParameter.Optional } ); For the sake of simplicity, future development of application OPIDDaily should strive to keep this as the one and only routing rule. Role Controllers There is an MVC controller defined for each role defined by the superadmin user. Each controller defined for a role inherits from SharedController to implement shared funtionality. The role controllers manage the views of application OPIDDaily. The implementation of each role controller defines methods that are accessible through the menubar defined on the layout file for the role. For example, the FrontDeskController - which implements the FrontDesk role - contains methods ExpressClient and ExistingClient (found on the SharedController) invoked from the menubar defined on file ~/Shared/_FrontDesk.cshtml. This is the layout file for the FrontDesk role. Each view returned by the FrontDeskController includes this layout file, thereby ensuring that a user in the role of FrontDesk will only invoke methods defined by the FrontDeskController. Each other role controllers is implemented the same way: each has a defined layout file that is included in each view returned by the controller. The layout file defines a menubar that specifies the methods that users in the role can invoke. As protection against unauthorized access to methods of a role controller, use of each role controller is limited to users in the role associated with the controller. For example, the FrontDeskController is protected by the annotation [Authorize(Roles = \"FrontDesk\")] Access is then restricted by the functionality of ASP.NET Identity to authenticated users in role FrontDesk. The SharedController Each role controller derives from SharedController. The SharedController implements the shared editor functionality available to the different roles. The UsersController The UsersController controls access to the ASP.NET Identity tables used to store registered users and the roles they are in. The method UsersController.Index is the entry point for an authenticated user. The role an authenticated user is in determines the method the user will be redirected to from this entry point. jqGrid The entire implementation of application OPIDDaily is structured around instances of jqGrid appearing in MVC Views. Each jqGrid is initially populated by a call to an MVC action made through the url property of the grid. For example, the clientsGrid on view FrontDesk/Clients.cshtml is initially populated by the call \"@Url.Action(\"GetClients\", \"FrontDesk)\" which is the value of the url argument to grid clientsGrid. (Method GetClients is found on the SharedController.) Each instance of a jqGride defines a pager , which defines the CRUD operations supported by the grid. Each CRUD operation is implemented by an MVC action of the role controller associated with the grid. Initial population of a grid, grid pagination, grid searching and grid CRUD operations are all supported by server side code. There is a collection of jqGrid Demos that was very helpful during the development of OPIDDaily. NowServing An important concept in the implementation of OPIDDaily is the concept of the client currently being served by a registered OPIDDaily user. For example, when a row in the clientsGrid defined on FrontDeskClients.cshtml is selected, the JavaScript function that is the value of the onSelectRow property of the grid is invoked. When the function is invoked, the value passed to its nowServing argument is the id associated with the client represented by the selected row. The function posts to the server side method NowServing of the FrontDeskController (found on SharedController) via the code Url.Action(\"NowServing\", \"FrontDesk\") passing the JavaScript variable nowServing in the post as a result of the line postData: { nowServing: nowServing } Method SharedController/NowServing has an optional argument called nowServing. MVC data binding will cause this variable to be bound to the JavaScript variable in the post. SessionHelper The SessionHelper class found on fie DAL/SessionHelper.cs is the key method for managing state in application OPIDDaily. This class is used to store key value pairs in the sesssion context private to each authenticated user. Managing the value of NowServing is a key use of the SessionHelper. Instead of having methods called GetNowServing and SetNowServing, the SharedController uses polymorphism to define two methods called NowServing with different signatures. The NowServing method with zero arguments invokes method SessionHelper.Get and the NowServing method with optional argumnt nowServing invokes method SessionHelper.Set. These two NowServing methods are invoked by many methods on SharedController to implement editing functionality private to an autheticated user. The other usage of the SessionHelper class is to manage the the back button helper methods ServiceTicketBackButtonHelper and SpecialReferralBackButtonHelper found on the SharedController. Express Clients and Existing Clients A first time client to Operation ID is referred to as an Express Client. Determining whether a given client is an Express Client is done by consulting the Apricot database to determine whether the client has a visit history . A visit history is a list of services previously performed for a client. If a client is determined to be an Express Client, then a user in the role FrontDesk (a FrontDesk admin) must use the OPIDDaily interface to edit the client and mark him/her as an Express Client. If consulting the Apricot database indicates that a client has a previous service history at Operation ID, then a FrontDesk admin must use the OPIDDaily interface to copy the history of previous visits to the Visits table. This table is related to the Clients table by a foreign key relationship. See the section Entity Framework Code First on the Infrastructure tab for a discussion of this foreign key relationship. Method AddClient of the SharedController receives the id returned by method Clients.AddVisit. This id will be the id of the client inserted into the Clients table. See this StackOverflow article for an explantion of the side effect of record insertion relied upon for this. The client with this id will become the NowServing client. (See the section NowServing.) The foreign key relationship existing between tables Clients and Visits is not supported by a cascading delete; deleting a client from the Clients table does not by default perform a cascading delete of any related records in the Visits table. The cascading delete must be performed manually. To see how this is done, see method RemoveClients in the SuperadminController. A client not marked as an Express Client is referred to as an Existing Client. A FrontDesk admin is responsible for using the interface to distinguish between these two types of client. This has the advantage that a user in the role of Interviewer (an Interviewer admin) need not know the difference. An Interviewer admin prepares Service Tickets (see next section) which automatically include the service history which has been recorded by a FrontDesk admin for Existing Clients. Service Tickets A primary goal of application OPIDDaily is the production of Service Tickets . A service ticket is a single piece of paper that shows the services requested by a given client together with the documents the client is supplying in support of his/her service request. In addition a service ticket provides a history of service requests from previous visits by the client, if any. Service Tickets are produced by an Interviewer Admin. The interviewing process begins by determining the service needs of a client together with documents the client is supplying in support of those needs. An Interviewer admin will use the OPIDDaily interface to capture this information. A client's history of previous visits to Operation ID will have already been recorded by a FrontDesk admin by consulting the Apricot database. After the Service Ticket for a client has been produced, an Interviewer admin will assist the client in filling out paperwork in support of service sought. It is suggested that a client's Service Ticket be forwarded to a BackOffice admin before work on a client's paperwork begins. By passing the Service Ticket to a BackOffice admin, a client's service voucher(s) can be cut and recorded in Apricot while the client is busy with paperwork. In effect a client's BackOffice stage can proceed in parallel with his/her Interviewing stage once the Service Ticket has bee produced. SignalR Application OIDDaily uses version 2.4.1 of the JavaScript SignalR package installed via NuGet. SignalR is a push-technology used to inform authenticated users about the progress of an Operation ID client as he/she passes through the Operation ID pipeline. The SignalR connection hub is defined on file DAL/DailyHub.cs. Invoking a method of DailyHub in the server side code causes a push-notifcation to go out to all clients registered to the hub. For example, when a FrontDesk admin adds a new client to the jqGrid managed by the FrontDeskController, the method SharedController.AddClient will invoke DailyHub.Refresh. A call to the line hubContext.Clients.All.refreshPage(); will send a push notification to all registered clients of the hub. Those clients listening for this notification, for example the view Interviewer/Clients.cshtml, will act upon the notification. In this case, the action will be to refresh the jqGrid of clients displayed by the grid. In this way this grid is kept in synch with the grid to which the client was added by the FrontDesk admin. SignalR is also used by both the special users Client1 and Client2 to refresh the tablet computer displays used by these users. (See the section Managing Users on the Database tab.)","title":"Implementation"},{"location":"Implementation/#implementation","text":"Application OPIDDaily is implemented as an ASP.NET Framework application using the ASP.NET MVC 5 project template provided by Visual Studio 2019 (Community Edition). It uses ASP.NET Identity 2.0 to define a set of user roles. Each user role is associated with a separate MVC controller. Controller inheritance is used to share editing functionality across user roles. It may be useful to upgrade application OPIDDaily to use the more modern ASP.NET Core technology. It may also be useful to proivde an alternative to the free hosting service AppHarbor, which is currentl used by OPIDDaily. See the AppHarbor section of the Infratructure tab for details on this. The graphical user interface of OPIDDaily is built using Bootstrap 3.0.0. Each user role is associated with its own layout file which defines a Bootstrap navbar containing links to the OPIDDaily features available to users in the role. The ASP.NET Identity system ensures that a user in a specified role cannot visit any pages outside of those allowed to users in that role. (See the section on Role Controllers.) Because of its use of SignalR, application OPIDDaily will always require a server side component. See the section on SignalR on this tab for a discussion of this.","title":"Implementation"},{"location":"Implementation/#the-superadmin-user","text":"OPIDDaily defines a pre-registered superadmin user who has privileges to create new roles invite new users to register in a pre-determined role add new agencies The credentials for the Superadmin user are configured on file Startup.cs. There is only a single user with role of Superadmin.","title":"The Superadmin User"},{"location":"Implementation/#mvc-routing","text":"Application OPIDDaily uses only the default routing rule supplied by the Visual Studio MVC 5 template. This default routing rule is found in .../App_Start/RoutConfig.cs . routes.MapRoute( name: \"Default\", url: \"{controller}/{action}/{id}\", defaults: new { controller = \"Users\", action = \"Index\", id = UrlParameter.Optional } ); For the sake of simplicity, future development of application OPIDDaily should strive to keep this as the one and only routing rule.","title":"MVC Routing"},{"location":"Implementation/#role-controllers","text":"There is an MVC controller defined for each role defined by the superadmin user. Each controller defined for a role inherits from SharedController to implement shared funtionality. The role controllers manage the views of application OPIDDaily. The implementation of each role controller defines methods that are accessible through the menubar defined on the layout file for the role. For example, the FrontDeskController - which implements the FrontDesk role - contains methods ExpressClient and ExistingClient (found on the SharedController) invoked from the menubar defined on file ~/Shared/_FrontDesk.cshtml. This is the layout file for the FrontDesk role. Each view returned by the FrontDeskController includes this layout file, thereby ensuring that a user in the role of FrontDesk will only invoke methods defined by the FrontDeskController. Each other role controllers is implemented the same way: each has a defined layout file that is included in each view returned by the controller. The layout file defines a menubar that specifies the methods that users in the role can invoke. As protection against unauthorized access to methods of a role controller, use of each role controller is limited to users in the role associated with the controller. For example, the FrontDeskController is protected by the annotation [Authorize(Roles = \"FrontDesk\")] Access is then restricted by the functionality of ASP.NET Identity to authenticated users in role FrontDesk.","title":"Role Controllers"},{"location":"Implementation/#the-sharedcontroller","text":"Each role controller derives from SharedController. The SharedController implements the shared editor functionality available to the different roles.","title":"The SharedController"},{"location":"Implementation/#the-userscontroller","text":"The UsersController controls access to the ASP.NET Identity tables used to store registered users and the roles they are in. The method UsersController.Index is the entry point for an authenticated user. The role an authenticated user is in determines the method the user will be redirected to from this entry point.","title":"The UsersController"},{"location":"Implementation/#jqgrid","text":"The entire implementation of application OPIDDaily is structured around instances of jqGrid appearing in MVC Views. Each jqGrid is initially populated by a call to an MVC action made through the url property of the grid. For example, the clientsGrid on view FrontDesk/Clients.cshtml is initially populated by the call \"@Url.Action(\"GetClients\", \"FrontDesk)\" which is the value of the url argument to grid clientsGrid. (Method GetClients is found on the SharedController.) Each instance of a jqGride defines a pager , which defines the CRUD operations supported by the grid. Each CRUD operation is implemented by an MVC action of the role controller associated with the grid. Initial population of a grid, grid pagination, grid searching and grid CRUD operations are all supported by server side code. There is a collection of jqGrid Demos that was very helpful during the development of OPIDDaily.","title":"jqGrid"},{"location":"Implementation/#nowserving","text":"An important concept in the implementation of OPIDDaily is the concept of the client currently being served by a registered OPIDDaily user. For example, when a row in the clientsGrid defined on FrontDeskClients.cshtml is selected, the JavaScript function that is the value of the onSelectRow property of the grid is invoked. When the function is invoked, the value passed to its nowServing argument is the id associated with the client represented by the selected row. The function posts to the server side method NowServing of the FrontDeskController (found on SharedController) via the code Url.Action(\"NowServing\", \"FrontDesk\") passing the JavaScript variable nowServing in the post as a result of the line postData: { nowServing: nowServing } Method SharedController/NowServing has an optional argument called nowServing. MVC data binding will cause this variable to be bound to the JavaScript variable in the post.","title":"NowServing"},{"location":"Implementation/#sessionhelper","text":"The SessionHelper class found on fie DAL/SessionHelper.cs is the key method for managing state in application OPIDDaily. This class is used to store key value pairs in the sesssion context private to each authenticated user. Managing the value of NowServing is a key use of the SessionHelper. Instead of having methods called GetNowServing and SetNowServing, the SharedController uses polymorphism to define two methods called NowServing with different signatures. The NowServing method with zero arguments invokes method SessionHelper.Get and the NowServing method with optional argumnt nowServing invokes method SessionHelper.Set. These two NowServing methods are invoked by many methods on SharedController to implement editing functionality private to an autheticated user. The other usage of the SessionHelper class is to manage the the back button helper methods ServiceTicketBackButtonHelper and SpecialReferralBackButtonHelper found on the SharedController.","title":"SessionHelper"},{"location":"Implementation/#express-clients-and-existing-clients","text":"A first time client to Operation ID is referred to as an Express Client. Determining whether a given client is an Express Client is done by consulting the Apricot database to determine whether the client has a visit history . A visit history is a list of services previously performed for a client. If a client is determined to be an Express Client, then a user in the role FrontDesk (a FrontDesk admin) must use the OPIDDaily interface to edit the client and mark him/her as an Express Client. If consulting the Apricot database indicates that a client has a previous service history at Operation ID, then a FrontDesk admin must use the OPIDDaily interface to copy the history of previous visits to the Visits table. This table is related to the Clients table by a foreign key relationship. See the section Entity Framework Code First on the Infrastructure tab for a discussion of this foreign key relationship. Method AddClient of the SharedController receives the id returned by method Clients.AddVisit. This id will be the id of the client inserted into the Clients table. See this StackOverflow article for an explantion of the side effect of record insertion relied upon for this. The client with this id will become the NowServing client. (See the section NowServing.) The foreign key relationship existing between tables Clients and Visits is not supported by a cascading delete; deleting a client from the Clients table does not by default perform a cascading delete of any related records in the Visits table. The cascading delete must be performed manually. To see how this is done, see method RemoveClients in the SuperadminController. A client not marked as an Express Client is referred to as an Existing Client. A FrontDesk admin is responsible for using the interface to distinguish between these two types of client. This has the advantage that a user in the role of Interviewer (an Interviewer admin) need not know the difference. An Interviewer admin prepares Service Tickets (see next section) which automatically include the service history which has been recorded by a FrontDesk admin for Existing Clients.","title":"Express Clients and Existing Clients"},{"location":"Implementation/#service-tickets","text":"A primary goal of application OPIDDaily is the production of Service Tickets . A service ticket is a single piece of paper that shows the services requested by a given client together with the documents the client is supplying in support of his/her service request. In addition a service ticket provides a history of service requests from previous visits by the client, if any. Service Tickets are produced by an Interviewer Admin. The interviewing process begins by determining the service needs of a client together with documents the client is supplying in support of those needs. An Interviewer admin will use the OPIDDaily interface to capture this information. A client's history of previous visits to Operation ID will have already been recorded by a FrontDesk admin by consulting the Apricot database. After the Service Ticket for a client has been produced, an Interviewer admin will assist the client in filling out paperwork in support of service sought. It is suggested that a client's Service Ticket be forwarded to a BackOffice admin before work on a client's paperwork begins. By passing the Service Ticket to a BackOffice admin, a client's service voucher(s) can be cut and recorded in Apricot while the client is busy with paperwork. In effect a client's BackOffice stage can proceed in parallel with his/her Interviewing stage once the Service Ticket has bee produced.","title":"Service Tickets"},{"location":"Implementation/#signalr","text":"Application OIDDaily uses version 2.4.1 of the JavaScript SignalR package installed via NuGet. SignalR is a push-technology used to inform authenticated users about the progress of an Operation ID client as he/she passes through the Operation ID pipeline. The SignalR connection hub is defined on file DAL/DailyHub.cs. Invoking a method of DailyHub in the server side code causes a push-notifcation to go out to all clients registered to the hub. For example, when a FrontDesk admin adds a new client to the jqGrid managed by the FrontDeskController, the method SharedController.AddClient will invoke DailyHub.Refresh. A call to the line hubContext.Clients.All.refreshPage(); will send a push notification to all registered clients of the hub. Those clients listening for this notification, for example the view Interviewer/Clients.cshtml, will act upon the notification. In this case, the action will be to refresh the jqGrid of clients displayed by the grid. In this way this grid is kept in synch with the grid to which the client was added by the FrontDesk admin. SignalR is also used by both the special users Client1 and Client2 to refresh the tablet computer displays used by these users. (See the section Managing Users on the Database tab.)","title":"SignalR"},{"location":"Infrastructure/","text":"Infrastructure The infrastructure of project OPIDDaily refers to the tools and technologies used to develop it, exclusive of the implementation itself. This section will be useful to a developer wanting to maintain and further develop OPIDDaily. It describes both the desktop development environment and the AppHarbor deployment environment for the web application OPIDDaily. Hosting Environments There are 3 hosting environments for OPIDDaily: desktop, staging and production. They differ in the database connection string used by each. The connection string is configured as the value of variable SQLSERVER_CONNECTION_STRING in the <appSettings> section of Web.config. The static value configured there is used by the desktop environment. The static value is overwritten by injection (at AppHarbor) when OPIDDaily is deployed to create either a staging or production release. The transformation files Web.Staging.config and Web.Release.config play a role in these deployments. The staging deployment at AppHarbor (called StageDaily) has its Environment variable set to Staging to force Web.Staging.config to be used upon deployment. This is done in the Settings section of the deployed application. The production deployment at AppHarbor has its Environment variable set to Release by default. This causes Web.Release.config to be used upon deployment. Visual Studio Project The Visual Studio 2019 (Community Edition) project representing application OPIDDaily was developed using an ASP.NET Identity 2.0 sample project developed by Syed Shanu as a starting point. The project is described in the excellent CodeProject article ASP.NET MVC Security and Creating User Role . The sample project uses the Visual Studio MVC5 project template and makes use of Katana OWIN middleware for user authentication. The use of Katana is built into the ASP.NET Identity 2.0 provider used by the project template, as is explained in the CodeProject article. On the Properties page of the Visual Studio project, remember to select Local IIS as the server and click the Create Virtual Directory button to set http://localhost/OpidDaily as the Project Url. These two actions create an application called OpidDaily under the Default Web Site in IIS and enable project OpidDaily to be run in a desktop version of IIS under this Url. Without this, the desktop IIS cannot be used to host the application. See the section on configuring IIS below. New development in the OPIDDaily Visual Studio project will be done in the staging branch and deployed to the stagedaily application at AppHarbor. (See the section on Deployment.) After changes to the staging branch have been tested in the desktop environment, using the Visual Studio GutHub interface they will be commited and then pushed to the staging branch at GitHub. After changes have been tested, they will be merged into the master branch of the project and from there deployed to application OPIDDaily at Appharbor. When the codebase is installed on a developer's Visual Studio instance on his/her machine by cloning the GitHub repository OPIDDaily , the developer must use Visual Sutdio to create a staging branch and then rebase this branch to origin/master . This will cause the remote changes to appear in the local staging branch without the need to Fetch and Pull them as is done between a remote master branch and a local master branch. SQL Server Express and SSMS The desktop version of OPIDDaily makes use of a SQL Server Express to store information about clients. The database is managed by v18.0 of SQL Server Management Studio (SSMS). Visual Studio includes the ability to view an installed SQL Server Express database, but it is more convenient to have SQL Server Management Studio available for this purpose. SQL Server Express and SSMS require separate (lengthy) downloads. The SQL Server Express database for OPIDDaily was created by executing the SQL query create database OPIDDailyDB executed inside of SSMS. With this database selected in SSMS, there are two SQL queries that need to be executed to enable IIS to talk to SQL Server Express. The first query is CREATE USER [NT AUTHORITY\\NETWORK SERVICE] FOR LOGIN [NT AUTHORITY\\NETWORK SERVICE] WITH DEFAULT_SCHEMA = dbo; This query creates the database user NT AUTHORITY\\NETWORK SERVICE. The second query is EXEC sp_addrolemember 'db_owner', 'NT AUTHORITY\\NETWORK SERVICE' This query grants user NT AUTHORITY\\NETWORK SERVICE the necessary permissions to communicate with IIS. These same two queries do not need to be executed in the AppHarbor database to prepare it to communicate with IIS. See below for information about the AppHarbor deployment of OPIDDaily. It is also necessary to change the application pool identity of application OPIDDaily running under IIS to NETWORKSERVICE. See the section on configuring IIS. There is a bug in SSMS v18.0 that causes it to stop after launch; the splash screen will display and then SSMS will quit. The fix for this is to edit file ssms.exe.config found in folder C:\\\\Program Files (x86)\\Microfsoft SQL Server Management Studio 18\\Common7\\IDE and remove (or comment out) the line which has the text: <NgenBind_OptimizeNonGac enabled=\"1\" /> This should be around line 38. Then restart SSMS. SSMS v18.0 does not have the capability to generate database diagrams. Previous versions of SSMS had this capability, but it was removed from v18.0. The capability has been added back to newer version of SSMS. Entity Framework Code First An application based on Entity Framework Code First may have multiple data contexts referencing a single database, as is the case for application OPIDDaily. In application OPIDDaily a data context is reserved for database migrations used by the ASP.NET Identity subsystem. Supporting multiple data contexts was enabled by some manual scaffolding in the codebase. In the case of the OPIDDaily application this scaffolding consisted of creating a project folder called DataContexts with two subfolders: IdentityMigrations and OPIDDailyMigrations. Also, a new folder called Entities was added to the OPIDDaily Visual Studio Solution to contain the classes defining the entities used by the solution. Before the code was run for the first time, the PowerShell command PM> Enable-Migrations -ContextTypeName OPIDDaily.DataContexts.IdentityDb -MigrationsDirectory DataContexts\\IdentityMigrations was executed. This created the two files DataContexts\\IdentityMigrations\\Configuration.cs DataContexts\\IdentityMigrations\\IdentityDB.cs which initiaized the IdentityDB data context. It is worth taking a look at these two files. In particular, the file IdentityDB.cs was edited to point to the application connection string through Config.ConnectionString. Executing the above PowerShell command allows the ASP.NET Identity system to automatically update the OPIDDailyDB with the ASP.NET Identity tables the first time the program is run. Running the program for the first time on the local IIS also automatically created the migration DataContexts\\IdentityMigrations\\201906051504117_InitialCreate.cs which specifes the code used to create the ASP.NET Identity tables. It is worth taking a look at this file. The first time the program was run, the Superadmin user, sa, was created in table AspNetUsers of the OPIDDaily database. (See the Database Diagram section on the Database tab.) User sa was created by method Startup.Configuration (part of Katana middleware) on the toplevel file OPIDDaily\\Startup.cs. This file specifies the user sa as the first user in role SuperAdmin (created on the file). It also points to the toplevel file Config.cs through the reference Config.SuperadminPassword, where the password of user sa is configured. This project used as its starting point the excellent CodeProject article ASP.NET MVC Security and Creating User Role It was necessary to move the class ApplicationDbContext from file Models\\IdentityModels.cs on the sample project to file DataContexts/IdentityDb.cs to make things work. The PowerShell command PM> Enable-Migrations -ContextTypeName OPIDDaily.DataContexts.OPIDDailyDB -MigrationsDirectory DataContexts\\OPIDDailyMigrations was executed to initialize the OPIDDaily data context. This created the two files DataContexts\\OPIDDailyMigrations\\Configuration.cs DataContexts\\OPIDDailyMigrations\\OPIDDailyDB.cs It is worth studying these two files. The first entity added to the OPIDDaily project was the class Entities\\Client.cs . This entity was connected to the OPIDDDaily data context by the inclusion of the declaration public DbSet<Client> Clients { get; set; } on file DataContexts\\OpidDailyDB.cs. Running the PowerShell command PM> add-migration -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration \"Clients\" caused the migration 201906152111225_Clients.cs to be added to DataContexts\\OPIDDailyMigrations. Running the PowerShell command PM> update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration then caused table Clients to be created in database OPIDDailyDB by executing the Up method of the above migration. Notice that the Up method refers to two database columns, ReferralDate and AppearanceDate, which are not in the currently deployed version of table Clients. The data migration 201907122132153_RemoveTwoDates.cs was used to remove these columns when it was realized they would not be needed. The second entity to be added to project OPIDDaily was the class Entities\\Visit.cs . This entity was connected to the OPIDDaily data context by the inclusion of the declaration public DbSet<Visit> Visits { get; set; } on file DataContexts\\OpidDailyDB.cs. Since table Visits was intended to be related to table Clients in the OPIDDailyDB by a foreign key, the declaration public ICollection<Visit> Visits { get; set; } was added to class Entities\\Client.cs . Entity Framework Code First automatically detected this when the \"History\" migration (described next) was created. Running the PowerShell command PM> add-migration -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration \"History\" then caused the migration 2019071220006570_History.cs to be added to folder DataContexts\\OPIDDailyMigrations. Studying the Up method of this migration, it is seen that the new table Visits to be created will have a foreign key relationship to table Clients . Running the PowerShell command PM> update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration then caused table Visits to be created in database OPIDDailyDB by executing the Up method of the above migration. As desired, table Visits has a foreign key relationship to table Clients . To see this, use SSMS to study the columns of table Visits . Each additional database change requires a pair of commands: an add-migration command followed by an update-database command. Executing an add-migration command creates a .cs file in the folder associated with the ConfigurationTypeName. Study this .cs file before executing the update-database command. If the database changes indicated in the .cs file are not correct, simply delete the .cs file before running the update-database command and then try again. To generate a script for the most recent migration, go back one migration in the migration history. For example, the migration preceding the migration ExpressClient was the migration PXXA. Therefore, to get a script for migration ExpressClient, execute the command update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration -Script -SourceMigration:PXXA The generated script can be run against the database at AppHarbor using SSMS. The script should be run before the code is updated at AppHarbor. Configuring IIS Development of the OPIDDaily application was performed under IIS on the localhost machine. This was done so that the development environment would match the deployment environment at AppHarbor as closely as possible. The localhost application server, Internet Information Services (IIS), was not pre-installed on the localhost; however, it is part of the operating system that can easily be activated. To activate IIS, go to the Programs section of the Control Panel and turn on the IIS feature: Programs > Programs and Features > Turn Windows features on or off > Internet Information Services After checking this box, expand it by clicking the plus sign (+) next to it and go to the section World Wide Web Services > Application Development Features In this section, check the checkboxes for ASP ASP.NET 3.5 ASP.NET 4.6 if they are not already checked. This will cause additional Application Pools to be made available to IIS. The OPIDDaily application is installed as an application under the Default Web Site in IIS as described in the section describing the Visual Studio Project. The Basic Settings dialog box for application OPIDDaily (accessible from the Actions pane of IIS), will give the physical path to the folder containing the source code as C:\\VS2019Projects\\OpidDaily\\OpidDaily This folder contains the project solution file, OPIDDaily.sln. Do not change it! Application OPIDDaily must be configured to use the application pool .NET v4.5. in the Basic Settings dialog box. (This application pool became available by enabling the features described above.) Finally, change the application identity of the selected application pool (.NET v4.5) to NetworkService. To do this, highlight Application Pools on the IIS Connections panel. This will cause the available application pools to appear in the IIS body panel. Highlight the .NET v4.5 application pool and then select Set Application Pool Defaults\u2026 to display a dialog box that will enable you to change the identity of the application pool. The dialog box is reachable either from the context menu of the highlighted application pool (under right mouse click) or from the Actions panel on the right of the IIS display. The dialog box contains a section labeled Process Model which contains an entry labeled Identity. Selecting the Identity entry adds an ellipsis next to the bold ApplicationPoolIdentity. Selecting the ellipsis brings up a dialog box with the pre-selected radio button Built-in account. Select NetworkService from the dropdown menu associated with this radio button. After approving this selection, the Identity column of the application pool .NET v4.5 will show NetworkService. See the section on SQL Server Express for how to establish user NetworkService. Git for Windows Visual Studio 2019 (Community Edition) comes with built-in support for GitHub. A new project can be added to Git source control on the desktop by simply selecting Add to Source Control from the context menu of the Solution file in the Solution Explorer. Once a project is under Git source control it can be added to a remote GitHub repository by using tools available through Visual Studio. However, a technique preferred by many developers is to use Git for Windows . Git for Windows provides a BASH shell interface to GitHub which uses the same set of commands available at GitHub itself. Git for Windows integrates with Windows Explorer to allow a BASH shell to be opened on a project that has been added to a desktop Git repository. Simply point Windows Explorer at the folder containing the project solution file and select Git BASH Here from the context menu of the folder to open a Git for Windows BASH shell. Then execute Git commands from this shell window. Git for Windows also offers Git GUI, a graphical version of most Git command line functions. To open Git GUI simply select Git GUI Here from Windows Explorer. GitHub Application OPIDDaily is stored at GitHub as a repository under an account with the email address peter3418@ymail.com and account name tmhsplb. Only user tmhsplb can deploy directly to this repository. Any other user needing to deploy a version of OPIDDaily to this repository must be declared a collaborator on repository OPIDDaily by user tmhsplb. A collaborator is a user associated with a different account established at GitHub. Git for Windows was used to create a remote to save to this GitHub account. The remote was created in the Git BASH shell by opening the shell on the folder which contains the OPIDDaily.sln file (folder C:/VS2019Projects/OPIDDaily ) and issuing the command git remote add origin https://github.com/tmhsplb/opiddaily.git Creating this remote only needs to be done once, because Git for Windows stores the remote. To remove a remote use the command git remote rm myremote The need for this may arise if there was a typo in the creation of myremote. AppHarbor AppHarbor (appharbor.com) is a Platform as a Service Provider which uses Amazon Web Services infrastructure for hosting applications and Git as a versioning tool. When an application is defined at AppHarbor, a Git repository is created to manage versions of the application's deployment. The OPIDDaily application is defined as an application at AppHarbor to create the production repository of the desktop application. The staging version of the desktop application is defined by a repository called stagedaily. The remote configured for OPIDDaily at AppHarbor is: https://tmhsplb@appharbor.com/opiddaily.git This remote is configured from a Windows Git BASH shell by the command git remote add opiddaily https://tmhsplb@appharbor.com/opiddaily.git After the remote is configured in the Git BASH shell, issuing the command git push opiddaily master will deploy the master branch of solution opiddaily to AppHarbor as application OPIDDaily, accessible through the URL https://opiddaily.apphb.com If you reset your password at AppHarbor, the 'git push' command will no longer work from the Git BASH shell. You need to have Git prompt you for your new password. To do this on a Windows 10 machine, go to Control Panel > User Accounts > Credential Manager > Windows Credentials and remove the AppHarbor entry under Generic Credentials. The next time you push, you will be prompted for your repository password. Application OPIDDaily is deployed using the free Canoe subscription level at AppHarbor. Under a Canoe subscription, the IIS application pool of pplication OPIDDaily has a 20 minute timeout, which forces OPIIDDaily to spin up its resources again after 20 minutes of idle time. This has not been a problem at Operation ID, because application OPIDDaily is in continuous use on the days Operation ID is open. However, the 20 minute timeout for the free Canoue version at AppHarbor would become a problem if OPIDDaily were extended to add features suitable for use by agencies that partner with Operation ID. These agencies would require that OPIDDaily be available on demand. On demand service would require the use of a paid subscription level at AppHarbor. The free Yocto version of SQL Server is used as an add-on to the OPIDDaily deployment. The Yocto version has a limit of 20MB of storage space, which is adequate for many days of usage by Operation ID. However, the database usage must be monitored to avvoind exceeding the 20MB limit. See the Database Utilization section on the Database tab for how to do this. A paid subscription to a SQL Server at AppHarbor would alleviate this problem. A staging version of application OPIDDaily was created by creating an application called stagedaily at AppHarbor. DO NOT CREATE A SEPARATE REPOSITORY FOR STAGEDAILY AT GITHUB. The remote configured for stagedaily at AppHarbor is: https://tmhsplbt@appharbor.com/stagedaily.git This remote is configured from a Windows Git BASH shell by the command git remote add stagedaily https://tmhsplb@appharbor.com/stagedaily.git After the remote is configured in the Git BASH shell, issuing the command git push stagedaily staging will deploy the staging branch of OPIDDaily to AppHarbor as application stagedaily, accessible through the URL https://stagedaily.apphb.com All the tables created by Entity Framework migrations magically appeared in the staging version. The magic was probably caused by deployment of the codebase of the staging branch to AppHarbor. This branch contains all the migrations used by the master branch. However, there was one table missing:the Invitations table. This table is not included in any migration, so it has to be added manually to the staging database. This is a simple matter of using SSMS to script the table and executing the script (in SSMS) against the staging database. The scripts that needed to run on the desktop to establish the connection between Visual Studio and the desktop SQL Server did not need to be run against the staging database to establish communication with the AppHarbor server. It is possible to use AppHarbor to generate a custom domain name for an application, but this has not been done for the OPIDDaily application. On June 6, 2019 I ran into a problem when I first pushed my OPIDDaily solution from my laptop to its GitHub repository and tried to pull the resulting solution onto my desktop computer. When I tried to run the solution from my desktop it complained about missing part of the path /bin/roslyn/csc.exe. I found a fix that worked at StackOverflow https://stackoverflow.com/questions/32780315/could-not-find-a-part-of-the-path-bin-roslyn-csc-exe There were many proposed fixes, but the one that looked easiest to try was: unload project OPIDDaily and then reload it. This was the first fix I tried and it worked! Deployment This section summarizes deployment to AppHarbor. Much of the information here can be found in the section on AppHarbor. There are two applications at AppHarbor: opiddaily and stagedaily. Application opiddaily is the deployment of the Visual Studio master branch of solution OPIDDaily. Application stagedaily is the deployment of the Visual Studio staging branch of solution OPIDDaily. After configuring the master remote the Visual Studio production branch can be deployed to AppHarbor by using the Git BASH Shell command git push opiddaily master AppHarbor willl automatically deploy application OPIDDaily if the push results in a successful build. After AppHarbor finishes building and deploying the code, application OPIDDaily can be viewed at https://opiddaily.apphb.com After configuring the staging remote (see above) the Visual Studio staging branch can be deployed to AppHarbor by using the Git BASH Shell command git push stagedaily staging AppHarbor will not automatically deploy application stagedaily even if the build is successful. It is necessary to click on the Deploy button at AppHarbor to deploy a successful build of application stagedaily. This may be by design if application stagedaily is recognized as a GitHub branch of application OPIDDaily. After clicking the Deploy button at AppHarbor to deploy a successful build of application stagedaily, the application can be viewed at https://stagedaily.apphb.com Although there are two applications at AppHarbor, there is only a single repository at GitHub. The name of this single repository is OPIDDaily. The repository is by default focused on the master branch of the codebase but can be switched to the staging branch by using the GitHub interface. jqGrid Almost every page of the application OPIDDaily features a grid produced by the jQuery jqGrid component. It was installed into the OPIDDaily project by using the Package Manager command: PM> Install-Package Trirand.jqGrid -Version 4.6.0 There is a collection of jqGrid Demos that was very helpful during the development of OPIDDaily. ELMAH Unhandled application errors are caught by ELMAH. Version 2.1.2 of Elamh.Mvc was installed in project OPIDDaily by using the Visual Studio NuGet package manager. By default, the ELMAH log can only be viewed on the server that hosts the application in which ELMAH is installed. To make the ELMAH log visible to a client remotely running the application, add <elmah> <security allowRemoteAccess=\"1\" /> </elmah> to the <configuration> section of file Web.config. To see ELMAH in action, modify the URL in the browser address bar to, for example, opiddaily.apphb.com/Admin/Foo This will generate an unhandled error because the MVC routing system will not be able to resolve the URL. Then go to opiddaily.apphb.com/elmah.axd to see that this error has been caught by ELMAH. On the localhost use localhost/opiddaily/elmah.axd to see the list of ELMAH errors. Installation of the Elmah.Mvc package adds the necessary DLL's and makes the necessary changes to Web.config to configure ELMAH for use. By default ELMAH will write to a database table called ELMAH_Error. The DDL Script definition of this table is found in a separate download . Download the DDL Script for MS SQL Server from the referenced web page. The script is a .SQL file which may be executed as a query inside SSMS to create table ELMAH_Error. The ELMAH log is configured by the connection string named OPidDailyConnectionString on Web.config. The value of this connection string is overwritten when the application is deployed to AppHarbor. See the Connection String section of the Database tab. The <sytem.web> section of Web.config must configure <httpHandlers> <add verb=\"POST,GET,HEAD\" path=\"elmah.axd\" type=\"Elmah.ErrorLogPageFactory, Elmah\" /> </httpHandlers> and the <system.webServer> section must configure <handlers> <add name=\"Elmah\" verb=\"POST,GET,HEAD\" path=\"elmah.axd\" type=\"Elmah.ErrorLogPageFactory, Elmah\" /> </handlers> in order for ELMAH to log both on the local IIS and on the remote server at AppHarbor. It is also necessary to set the connection string alias as described in the Connection String section of the Database tab. MkDocs This document was created using MkDocs as was the MkDocs website itself. MkDocs was installed following the guide on this page . This guide is useful for setting up the environment; however, the syntax for the file mkdocs.yml has changed from that described in the guide. The new syntax can be found at in the User Guide section of this document . An MkDocs document is a static website and can hosted byany service that supports static sites. This MkDocs document is hosted by GitHub Pages . The Brackets open source text editor was used to develop the document on the desktop. An MkDocs document uses HTML Markdown for a desktop development version of a document. GitHub provides a cheatsheet for Markdown syntax . MkDocs provides a built-in preview server. To start this server, open a BASH Shell on the folder containing the mkdoc.yml file of the project and execute mkdocs serve Then go to http://127.0.0.1:8000 in a desktop browser. Pages can be edited and saved while in preview mode. The changes will be reflected in the browser document. When it is time to publish a version of a document, in a Git BASH shell opened on the folder containing the mkdocs.yml file, issue the command mkdocs build to expand the Markdown version of the document into an HTML version in the /site folder. Then open the Git GUI on the folder containing the mkdocs.yml file and use the GUI to create a new Git repository on the local disk. Next create repository opiddailydoc to hold the documentation at GitHub. After this, in the folder containing the mkdocs.yml file, define a remote called origin for the document: git remote add origin https://github.com/tmhsplb/opiddailydoc This command references the GitHub repository opiddailydoc. The remote only needs to be defined once. It will be remembered by the Git BASH shell. In the shell issue the following commands: git add -A git commit -a -m 'Initial commit' git push origin master This will push the master branch of the document to the repository identified by the remote called origin. Then click on the Settings tab for the newly created repository and scroll down to the GitHub Pages section. Select the master branch source and click on the Save button. Finally, to view the published document go to: https://tmhsplb.github.io/opiddailydoc/site Subsequent edits only require the commands mkdocs build git commit -a -m '<Comment for new commit>' git push origin master to update repository opiddailydoc at GitHub. It may take several minutes before edits are available.","title":"Infrastructure"},{"location":"Infrastructure/#infrastructure","text":"The infrastructure of project OPIDDaily refers to the tools and technologies used to develop it, exclusive of the implementation itself. This section will be useful to a developer wanting to maintain and further develop OPIDDaily. It describes both the desktop development environment and the AppHarbor deployment environment for the web application OPIDDaily.","title":"Infrastructure"},{"location":"Infrastructure/#hosting-environments","text":"There are 3 hosting environments for OPIDDaily: desktop, staging and production. They differ in the database connection string used by each. The connection string is configured as the value of variable SQLSERVER_CONNECTION_STRING in the <appSettings> section of Web.config. The static value configured there is used by the desktop environment. The static value is overwritten by injection (at AppHarbor) when OPIDDaily is deployed to create either a staging or production release. The transformation files Web.Staging.config and Web.Release.config play a role in these deployments. The staging deployment at AppHarbor (called StageDaily) has its Environment variable set to Staging to force Web.Staging.config to be used upon deployment. This is done in the Settings section of the deployed application. The production deployment at AppHarbor has its Environment variable set to Release by default. This causes Web.Release.config to be used upon deployment.","title":"Hosting Environments"},{"location":"Infrastructure/#visual-studio-project","text":"The Visual Studio 2019 (Community Edition) project representing application OPIDDaily was developed using an ASP.NET Identity 2.0 sample project developed by Syed Shanu as a starting point. The project is described in the excellent CodeProject article ASP.NET MVC Security and Creating User Role . The sample project uses the Visual Studio MVC5 project template and makes use of Katana OWIN middleware for user authentication. The use of Katana is built into the ASP.NET Identity 2.0 provider used by the project template, as is explained in the CodeProject article. On the Properties page of the Visual Studio project, remember to select Local IIS as the server and click the Create Virtual Directory button to set http://localhost/OpidDaily as the Project Url. These two actions create an application called OpidDaily under the Default Web Site in IIS and enable project OpidDaily to be run in a desktop version of IIS under this Url. Without this, the desktop IIS cannot be used to host the application. See the section on configuring IIS below. New development in the OPIDDaily Visual Studio project will be done in the staging branch and deployed to the stagedaily application at AppHarbor. (See the section on Deployment.) After changes to the staging branch have been tested in the desktop environment, using the Visual Studio GutHub interface they will be commited and then pushed to the staging branch at GitHub. After changes have been tested, they will be merged into the master branch of the project and from there deployed to application OPIDDaily at Appharbor. When the codebase is installed on a developer's Visual Studio instance on his/her machine by cloning the GitHub repository OPIDDaily , the developer must use Visual Sutdio to create a staging branch and then rebase this branch to origin/master . This will cause the remote changes to appear in the local staging branch without the need to Fetch and Pull them as is done between a remote master branch and a local master branch.","title":"Visual Studio Project"},{"location":"Infrastructure/#sql-server-express-and-ssms","text":"The desktop version of OPIDDaily makes use of a SQL Server Express to store information about clients. The database is managed by v18.0 of SQL Server Management Studio (SSMS). Visual Studio includes the ability to view an installed SQL Server Express database, but it is more convenient to have SQL Server Management Studio available for this purpose. SQL Server Express and SSMS require separate (lengthy) downloads. The SQL Server Express database for OPIDDaily was created by executing the SQL query create database OPIDDailyDB executed inside of SSMS. With this database selected in SSMS, there are two SQL queries that need to be executed to enable IIS to talk to SQL Server Express. The first query is CREATE USER [NT AUTHORITY\\NETWORK SERVICE] FOR LOGIN [NT AUTHORITY\\NETWORK SERVICE] WITH DEFAULT_SCHEMA = dbo; This query creates the database user NT AUTHORITY\\NETWORK SERVICE. The second query is EXEC sp_addrolemember 'db_owner', 'NT AUTHORITY\\NETWORK SERVICE' This query grants user NT AUTHORITY\\NETWORK SERVICE the necessary permissions to communicate with IIS. These same two queries do not need to be executed in the AppHarbor database to prepare it to communicate with IIS. See below for information about the AppHarbor deployment of OPIDDaily. It is also necessary to change the application pool identity of application OPIDDaily running under IIS to NETWORKSERVICE. See the section on configuring IIS. There is a bug in SSMS v18.0 that causes it to stop after launch; the splash screen will display and then SSMS will quit. The fix for this is to edit file ssms.exe.config found in folder C:\\\\Program Files (x86)\\Microfsoft SQL Server Management Studio 18\\Common7\\IDE and remove (or comment out) the line which has the text: <NgenBind_OptimizeNonGac enabled=\"1\" /> This should be around line 38. Then restart SSMS. SSMS v18.0 does not have the capability to generate database diagrams. Previous versions of SSMS had this capability, but it was removed from v18.0. The capability has been added back to newer version of SSMS.","title":"SQL Server Express and SSMS"},{"location":"Infrastructure/#entity-framework-code-first","text":"An application based on Entity Framework Code First may have multiple data contexts referencing a single database, as is the case for application OPIDDaily. In application OPIDDaily a data context is reserved for database migrations used by the ASP.NET Identity subsystem. Supporting multiple data contexts was enabled by some manual scaffolding in the codebase. In the case of the OPIDDaily application this scaffolding consisted of creating a project folder called DataContexts with two subfolders: IdentityMigrations and OPIDDailyMigrations. Also, a new folder called Entities was added to the OPIDDaily Visual Studio Solution to contain the classes defining the entities used by the solution. Before the code was run for the first time, the PowerShell command PM> Enable-Migrations -ContextTypeName OPIDDaily.DataContexts.IdentityDb -MigrationsDirectory DataContexts\\IdentityMigrations was executed. This created the two files DataContexts\\IdentityMigrations\\Configuration.cs DataContexts\\IdentityMigrations\\IdentityDB.cs which initiaized the IdentityDB data context. It is worth taking a look at these two files. In particular, the file IdentityDB.cs was edited to point to the application connection string through Config.ConnectionString. Executing the above PowerShell command allows the ASP.NET Identity system to automatically update the OPIDDailyDB with the ASP.NET Identity tables the first time the program is run. Running the program for the first time on the local IIS also automatically created the migration DataContexts\\IdentityMigrations\\201906051504117_InitialCreate.cs which specifes the code used to create the ASP.NET Identity tables. It is worth taking a look at this file. The first time the program was run, the Superadmin user, sa, was created in table AspNetUsers of the OPIDDaily database. (See the Database Diagram section on the Database tab.) User sa was created by method Startup.Configuration (part of Katana middleware) on the toplevel file OPIDDaily\\Startup.cs. This file specifies the user sa as the first user in role SuperAdmin (created on the file). It also points to the toplevel file Config.cs through the reference Config.SuperadminPassword, where the password of user sa is configured. This project used as its starting point the excellent CodeProject article ASP.NET MVC Security and Creating User Role It was necessary to move the class ApplicationDbContext from file Models\\IdentityModels.cs on the sample project to file DataContexts/IdentityDb.cs to make things work. The PowerShell command PM> Enable-Migrations -ContextTypeName OPIDDaily.DataContexts.OPIDDailyDB -MigrationsDirectory DataContexts\\OPIDDailyMigrations was executed to initialize the OPIDDaily data context. This created the two files DataContexts\\OPIDDailyMigrations\\Configuration.cs DataContexts\\OPIDDailyMigrations\\OPIDDailyDB.cs It is worth studying these two files. The first entity added to the OPIDDaily project was the class Entities\\Client.cs . This entity was connected to the OPIDDDaily data context by the inclusion of the declaration public DbSet<Client> Clients { get; set; } on file DataContexts\\OpidDailyDB.cs. Running the PowerShell command PM> add-migration -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration \"Clients\" caused the migration 201906152111225_Clients.cs to be added to DataContexts\\OPIDDailyMigrations. Running the PowerShell command PM> update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration then caused table Clients to be created in database OPIDDailyDB by executing the Up method of the above migration. Notice that the Up method refers to two database columns, ReferralDate and AppearanceDate, which are not in the currently deployed version of table Clients. The data migration 201907122132153_RemoveTwoDates.cs was used to remove these columns when it was realized they would not be needed. The second entity to be added to project OPIDDaily was the class Entities\\Visit.cs . This entity was connected to the OPIDDaily data context by the inclusion of the declaration public DbSet<Visit> Visits { get; set; } on file DataContexts\\OpidDailyDB.cs. Since table Visits was intended to be related to table Clients in the OPIDDailyDB by a foreign key, the declaration public ICollection<Visit> Visits { get; set; } was added to class Entities\\Client.cs . Entity Framework Code First automatically detected this when the \"History\" migration (described next) was created. Running the PowerShell command PM> add-migration -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration \"History\" then caused the migration 2019071220006570_History.cs to be added to folder DataContexts\\OPIDDailyMigrations. Studying the Up method of this migration, it is seen that the new table Visits to be created will have a foreign key relationship to table Clients . Running the PowerShell command PM> update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration then caused table Visits to be created in database OPIDDailyDB by executing the Up method of the above migration. As desired, table Visits has a foreign key relationship to table Clients . To see this, use SSMS to study the columns of table Visits . Each additional database change requires a pair of commands: an add-migration command followed by an update-database command. Executing an add-migration command creates a .cs file in the folder associated with the ConfigurationTypeName. Study this .cs file before executing the update-database command. If the database changes indicated in the .cs file are not correct, simply delete the .cs file before running the update-database command and then try again. To generate a script for the most recent migration, go back one migration in the migration history. For example, the migration preceding the migration ExpressClient was the migration PXXA. Therefore, to get a script for migration ExpressClient, execute the command update-database -ConfigurationTypeName OPIDDaily.DataContexts.OPIDDailyMigrations.Configuration -Script -SourceMigration:PXXA The generated script can be run against the database at AppHarbor using SSMS. The script should be run before the code is updated at AppHarbor.","title":"Entity Framework Code First"},{"location":"Infrastructure/#configuring-iis","text":"Development of the OPIDDaily application was performed under IIS on the localhost machine. This was done so that the development environment would match the deployment environment at AppHarbor as closely as possible. The localhost application server, Internet Information Services (IIS), was not pre-installed on the localhost; however, it is part of the operating system that can easily be activated. To activate IIS, go to the Programs section of the Control Panel and turn on the IIS feature: Programs > Programs and Features > Turn Windows features on or off > Internet Information Services After checking this box, expand it by clicking the plus sign (+) next to it and go to the section World Wide Web Services > Application Development Features In this section, check the checkboxes for ASP ASP.NET 3.5 ASP.NET 4.6 if they are not already checked. This will cause additional Application Pools to be made available to IIS. The OPIDDaily application is installed as an application under the Default Web Site in IIS as described in the section describing the Visual Studio Project. The Basic Settings dialog box for application OPIDDaily (accessible from the Actions pane of IIS), will give the physical path to the folder containing the source code as C:\\VS2019Projects\\OpidDaily\\OpidDaily This folder contains the project solution file, OPIDDaily.sln. Do not change it! Application OPIDDaily must be configured to use the application pool .NET v4.5. in the Basic Settings dialog box. (This application pool became available by enabling the features described above.) Finally, change the application identity of the selected application pool (.NET v4.5) to NetworkService. To do this, highlight Application Pools on the IIS Connections panel. This will cause the available application pools to appear in the IIS body panel. Highlight the .NET v4.5 application pool and then select Set Application Pool Defaults\u2026 to display a dialog box that will enable you to change the identity of the application pool. The dialog box is reachable either from the context menu of the highlighted application pool (under right mouse click) or from the Actions panel on the right of the IIS display. The dialog box contains a section labeled Process Model which contains an entry labeled Identity. Selecting the Identity entry adds an ellipsis next to the bold ApplicationPoolIdentity. Selecting the ellipsis brings up a dialog box with the pre-selected radio button Built-in account. Select NetworkService from the dropdown menu associated with this radio button. After approving this selection, the Identity column of the application pool .NET v4.5 will show NetworkService. See the section on SQL Server Express for how to establish user NetworkService.","title":"Configuring IIS"},{"location":"Infrastructure/#git-for-windows","text":"Visual Studio 2019 (Community Edition) comes with built-in support for GitHub. A new project can be added to Git source control on the desktop by simply selecting Add to Source Control from the context menu of the Solution file in the Solution Explorer. Once a project is under Git source control it can be added to a remote GitHub repository by using tools available through Visual Studio. However, a technique preferred by many developers is to use Git for Windows . Git for Windows provides a BASH shell interface to GitHub which uses the same set of commands available at GitHub itself. Git for Windows integrates with Windows Explorer to allow a BASH shell to be opened on a project that has been added to a desktop Git repository. Simply point Windows Explorer at the folder containing the project solution file and select Git BASH Here from the context menu of the folder to open a Git for Windows BASH shell. Then execute Git commands from this shell window. Git for Windows also offers Git GUI, a graphical version of most Git command line functions. To open Git GUI simply select Git GUI Here from Windows Explorer.","title":"Git for Windows"},{"location":"Infrastructure/#github","text":"Application OPIDDaily is stored at GitHub as a repository under an account with the email address peter3418@ymail.com and account name tmhsplb. Only user tmhsplb can deploy directly to this repository. Any other user needing to deploy a version of OPIDDaily to this repository must be declared a collaborator on repository OPIDDaily by user tmhsplb. A collaborator is a user associated with a different account established at GitHub. Git for Windows was used to create a remote to save to this GitHub account. The remote was created in the Git BASH shell by opening the shell on the folder which contains the OPIDDaily.sln file (folder C:/VS2019Projects/OPIDDaily ) and issuing the command git remote add origin https://github.com/tmhsplb/opiddaily.git Creating this remote only needs to be done once, because Git for Windows stores the remote. To remove a remote use the command git remote rm myremote The need for this may arise if there was a typo in the creation of myremote.","title":"GitHub"},{"location":"Infrastructure/#appharbor","text":"AppHarbor (appharbor.com) is a Platform as a Service Provider which uses Amazon Web Services infrastructure for hosting applications and Git as a versioning tool. When an application is defined at AppHarbor, a Git repository is created to manage versions of the application's deployment. The OPIDDaily application is defined as an application at AppHarbor to create the production repository of the desktop application. The staging version of the desktop application is defined by a repository called stagedaily. The remote configured for OPIDDaily at AppHarbor is: https://tmhsplb@appharbor.com/opiddaily.git This remote is configured from a Windows Git BASH shell by the command git remote add opiddaily https://tmhsplb@appharbor.com/opiddaily.git After the remote is configured in the Git BASH shell, issuing the command git push opiddaily master will deploy the master branch of solution opiddaily to AppHarbor as application OPIDDaily, accessible through the URL https://opiddaily.apphb.com If you reset your password at AppHarbor, the 'git push' command will no longer work from the Git BASH shell. You need to have Git prompt you for your new password. To do this on a Windows 10 machine, go to Control Panel > User Accounts > Credential Manager > Windows Credentials and remove the AppHarbor entry under Generic Credentials. The next time you push, you will be prompted for your repository password. Application OPIDDaily is deployed using the free Canoe subscription level at AppHarbor. Under a Canoe subscription, the IIS application pool of pplication OPIDDaily has a 20 minute timeout, which forces OPIIDDaily to spin up its resources again after 20 minutes of idle time. This has not been a problem at Operation ID, because application OPIDDaily is in continuous use on the days Operation ID is open. However, the 20 minute timeout for the free Canoue version at AppHarbor would become a problem if OPIDDaily were extended to add features suitable for use by agencies that partner with Operation ID. These agencies would require that OPIDDaily be available on demand. On demand service would require the use of a paid subscription level at AppHarbor. The free Yocto version of SQL Server is used as an add-on to the OPIDDaily deployment. The Yocto version has a limit of 20MB of storage space, which is adequate for many days of usage by Operation ID. However, the database usage must be monitored to avvoind exceeding the 20MB limit. See the Database Utilization section on the Database tab for how to do this. A paid subscription to a SQL Server at AppHarbor would alleviate this problem. A staging version of application OPIDDaily was created by creating an application called stagedaily at AppHarbor. DO NOT CREATE A SEPARATE REPOSITORY FOR STAGEDAILY AT GITHUB. The remote configured for stagedaily at AppHarbor is: https://tmhsplbt@appharbor.com/stagedaily.git This remote is configured from a Windows Git BASH shell by the command git remote add stagedaily https://tmhsplb@appharbor.com/stagedaily.git After the remote is configured in the Git BASH shell, issuing the command git push stagedaily staging will deploy the staging branch of OPIDDaily to AppHarbor as application stagedaily, accessible through the URL https://stagedaily.apphb.com All the tables created by Entity Framework migrations magically appeared in the staging version. The magic was probably caused by deployment of the codebase of the staging branch to AppHarbor. This branch contains all the migrations used by the master branch. However, there was one table missing:the Invitations table. This table is not included in any migration, so it has to be added manually to the staging database. This is a simple matter of using SSMS to script the table and executing the script (in SSMS) against the staging database. The scripts that needed to run on the desktop to establish the connection between Visual Studio and the desktop SQL Server did not need to be run against the staging database to establish communication with the AppHarbor server. It is possible to use AppHarbor to generate a custom domain name for an application, but this has not been done for the OPIDDaily application. On June 6, 2019 I ran into a problem when I first pushed my OPIDDaily solution from my laptop to its GitHub repository and tried to pull the resulting solution onto my desktop computer. When I tried to run the solution from my desktop it complained about missing part of the path /bin/roslyn/csc.exe. I found a fix that worked at StackOverflow https://stackoverflow.com/questions/32780315/could-not-find-a-part-of-the-path-bin-roslyn-csc-exe There were many proposed fixes, but the one that looked easiest to try was: unload project OPIDDaily and then reload it. This was the first fix I tried and it worked!","title":"AppHarbor"},{"location":"Infrastructure/#deployment","text":"This section summarizes deployment to AppHarbor. Much of the information here can be found in the section on AppHarbor. There are two applications at AppHarbor: opiddaily and stagedaily. Application opiddaily is the deployment of the Visual Studio master branch of solution OPIDDaily. Application stagedaily is the deployment of the Visual Studio staging branch of solution OPIDDaily. After configuring the master remote the Visual Studio production branch can be deployed to AppHarbor by using the Git BASH Shell command git push opiddaily master AppHarbor willl automatically deploy application OPIDDaily if the push results in a successful build. After AppHarbor finishes building and deploying the code, application OPIDDaily can be viewed at https://opiddaily.apphb.com After configuring the staging remote (see above) the Visual Studio staging branch can be deployed to AppHarbor by using the Git BASH Shell command git push stagedaily staging AppHarbor will not automatically deploy application stagedaily even if the build is successful. It is necessary to click on the Deploy button at AppHarbor to deploy a successful build of application stagedaily. This may be by design if application stagedaily is recognized as a GitHub branch of application OPIDDaily. After clicking the Deploy button at AppHarbor to deploy a successful build of application stagedaily, the application can be viewed at https://stagedaily.apphb.com Although there are two applications at AppHarbor, there is only a single repository at GitHub. The name of this single repository is OPIDDaily. The repository is by default focused on the master branch of the codebase but can be switched to the staging branch by using the GitHub interface.","title":"Deployment"},{"location":"Infrastructure/#jqgrid","text":"Almost every page of the application OPIDDaily features a grid produced by the jQuery jqGrid component. It was installed into the OPIDDaily project by using the Package Manager command: PM> Install-Package Trirand.jqGrid -Version 4.6.0 There is a collection of jqGrid Demos that was very helpful during the development of OPIDDaily.","title":"jqGrid"},{"location":"Infrastructure/#elmah","text":"Unhandled application errors are caught by ELMAH. Version 2.1.2 of Elamh.Mvc was installed in project OPIDDaily by using the Visual Studio NuGet package manager. By default, the ELMAH log can only be viewed on the server that hosts the application in which ELMAH is installed. To make the ELMAH log visible to a client remotely running the application, add <elmah> <security allowRemoteAccess=\"1\" /> </elmah> to the <configuration> section of file Web.config. To see ELMAH in action, modify the URL in the browser address bar to, for example, opiddaily.apphb.com/Admin/Foo This will generate an unhandled error because the MVC routing system will not be able to resolve the URL. Then go to opiddaily.apphb.com/elmah.axd to see that this error has been caught by ELMAH. On the localhost use localhost/opiddaily/elmah.axd to see the list of ELMAH errors. Installation of the Elmah.Mvc package adds the necessary DLL's and makes the necessary changes to Web.config to configure ELMAH for use. By default ELMAH will write to a database table called ELMAH_Error. The DDL Script definition of this table is found in a separate download . Download the DDL Script for MS SQL Server from the referenced web page. The script is a .SQL file which may be executed as a query inside SSMS to create table ELMAH_Error. The ELMAH log is configured by the connection string named OPidDailyConnectionString on Web.config. The value of this connection string is overwritten when the application is deployed to AppHarbor. See the Connection String section of the Database tab. The <sytem.web> section of Web.config must configure <httpHandlers> <add verb=\"POST,GET,HEAD\" path=\"elmah.axd\" type=\"Elmah.ErrorLogPageFactory, Elmah\" /> </httpHandlers> and the <system.webServer> section must configure <handlers> <add name=\"Elmah\" verb=\"POST,GET,HEAD\" path=\"elmah.axd\" type=\"Elmah.ErrorLogPageFactory, Elmah\" /> </handlers> in order for ELMAH to log both on the local IIS and on the remote server at AppHarbor. It is also necessary to set the connection string alias as described in the Connection String section of the Database tab.","title":"ELMAH"},{"location":"Infrastructure/#mkdocs","text":"This document was created using MkDocs as was the MkDocs website itself. MkDocs was installed following the guide on this page . This guide is useful for setting up the environment; however, the syntax for the file mkdocs.yml has changed from that described in the guide. The new syntax can be found at in the User Guide section of this document . An MkDocs document is a static website and can hosted byany service that supports static sites. This MkDocs document is hosted by GitHub Pages . The Brackets open source text editor was used to develop the document on the desktop. An MkDocs document uses HTML Markdown for a desktop development version of a document. GitHub provides a cheatsheet for Markdown syntax . MkDocs provides a built-in preview server. To start this server, open a BASH Shell on the folder containing the mkdoc.yml file of the project and execute mkdocs serve Then go to http://127.0.0.1:8000 in a desktop browser. Pages can be edited and saved while in preview mode. The changes will be reflected in the browser document. When it is time to publish a version of a document, in a Git BASH shell opened on the folder containing the mkdocs.yml file, issue the command mkdocs build to expand the Markdown version of the document into an HTML version in the /site folder. Then open the Git GUI on the folder containing the mkdocs.yml file and use the GUI to create a new Git repository on the local disk. Next create repository opiddailydoc to hold the documentation at GitHub. After this, in the folder containing the mkdocs.yml file, define a remote called origin for the document: git remote add origin https://github.com/tmhsplb/opiddailydoc This command references the GitHub repository opiddailydoc. The remote only needs to be defined once. It will be remembered by the Git BASH shell. In the shell issue the following commands: git add -A git commit -a -m 'Initial commit' git push origin master This will push the master branch of the document to the repository identified by the remote called origin. Then click on the Settings tab for the newly created repository and scroll down to the GitHub Pages section. Select the master branch source and click on the Save button. Finally, to view the published document go to: https://tmhsplb.github.io/opiddailydoc/site Subsequent edits only require the commands mkdocs build git commit -a -m '<Comment for new commit>' git push origin master to update repository opiddailydoc at GitHub. It may take several minutes before edits are available.","title":"MkDocs"}]}